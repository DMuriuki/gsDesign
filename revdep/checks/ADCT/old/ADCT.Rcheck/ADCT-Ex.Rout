
R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ADCT"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ADCT')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BioInfo.Power")
> ### * BioInfo.Power
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BioInfo.Power
> ### Title: Power calculation for Biomarker-Informed Design with
> ###   Hierarchical Model
> ### Aliases: BioInfo.Power
> 
> ### ** Examples
> 
> ## Determine critical value Zalpha for alpha (power) =0.025
> u0y=c(0,0,0); u0x=c(0,0,0)
> BioInfo.Power(uCtl=0, u0y, u0x, rhou=1, suy=0, sux=0, rho=1, sy=4, sx=4,
+  Zalpha=2.772, N1=100, N=300, nArms=3, nSims=1000)
[1] 0.032 0.383 0.308 0.309
> ## Power simulation
> u0y=c(1,0.5,0.2)
> u0x=c(2,1,0.5)
> BioInfo.Power(uCtl=0, u0y, u0x, rhou=0.2, suy=0.2, sux=0.2, rho=0.2, sy=4, sx=4,
+  Zalpha=2.772, N1=100, N=300, nArms=3, nSims=500)
[1] 0.828 0.948 0.048 0.004
> 
> 
> 
> 
> cleanEx()
> nameEx("CopriEndpt.Power")
> ### * CopriEndpt.Power
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CopriEndpt.Power
> ### Title: Power Calculation for Two Coprimary Endpoints.
> ### Aliases: CopriEndpt.Power
> 
> ### ** Examples
> 
> # Example in Chang (2014) page  272
> CopriEndpt.Power(n=197, tau=0.5, mu1=0.2, mu2=0.2, rho=0.5,
+ alpha1=0.0025, alpha2=0.024, alternative="one.sided")
[1] 0.6838159
attr(,"error")
[1] 1e-15
attr(,"msg")
[1] "Normal Completion"
>  sapply(c(-0.8,-0.5,-0.2,0,0.2,0.5,0.8),CopriEndpt.Power,
+ n=197, tau=0.5, mu1=0.2, mu2=0.2, alpha1=0.0025, alpha2=0.024, alternative="one.sided")
[1] 0.5936971 0.6024713 0.6203169 0.6354056 0.6527376 0.6838160 0.7265165
> 
> 
> 
> cleanEx()
> nameEx("OneArm.CondPower")
> ### * OneArm.CondPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: OneArm.CondPower
> ### Title: Conditional power for one-arm, two-stage design with two primary
> ###   endpoints
> ### Aliases: OneArm.CondPower
> 
> ### ** Examples
> 
> # Example in Chang (2014) page  277
> OneArm.CondPower(mu1=0.1333, mu2=0.1605, n1=130, n2=130, rho=0.35,
+  tau=0.5, alpha2=0.024, alternative = "one.sided")
[1] 0.3105335
attr(,"error")
[1] 1e-15
attr(,"msg")
[1] "Normal Completion"
> OneArm.CondPower(mu1=0.1333, mu2=0.1605, n1=130, n2=414, rho=0.35,
+  tau=0.5, alpha2=0.024, alternative = "one.sided")
[1] 0.8020706
attr(,"error")
[1] 1e-15
attr(,"msg")
[1] "Normal Completion"
> 
> 
> 
> cleanEx()
> nameEx("TwoArms.CondPower")
> ### * TwoArms.CondPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TwoArms.CondPower
> ### Title: Conditional power for two-group design, two-stage design with
> ###   two primary endpoints
> ### Aliases: TwoArms.CondPower
> 
> ### ** Examples
> 
> # Example in Chang (2014) page  278
> TwoArms.CondPower(mu1=0.28, sigma1=1.9, mu2=0.35, sigma2=2.2, n1=340, n2=340,
+ rho=0.3, tau=0.5, alpha2=0.024, alternative = "one.sided")
[1] 0.6670821
attr(,"error")
[1] 1e-15
attr(,"msg")
[1] "Normal Completion"
> TwoArms.CondPower(mu1=0.28, sigma1=1.9, mu2=0.35, sigma2=2.2, n1=340, n2=482,
+ rho=0.3, tau=0.5, alpha2=0.024, alternative = "one.sided")
[1] 0.8021966
attr(,"error")
[1] 1e-15
attr(,"msg")
[1] "Normal Completion"
> TwoArms.CondPower(mu1=0.32, sigma1=2, mu2=0.4, sigma2=1.8, n1=340, n2=340,
+ rho=0.3, tau=0.5, alpha2=0.024, alternative = "one.sided")
[1] 0.8596656
attr(,"error")
[1] 1e-15
attr(,"msg")
[1] "Normal Completion"
> 
> 
> 
> cleanEx()
> nameEx("TwoGrpCopriEndpt.SimPower")
> ### * TwoGrpCopriEndpt.SimPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TwoGrpCopriEndpt.SimPower
> ### Title: Power Simulation for Two Group Two Coprimary Endpoints Group
> ###   Sequential Design.
> ### Aliases: TwoGrpCopriEndpt.SimPower
> 
> ### ** Examples
> 
> # Example in Chang (2014) page  275
> TwoGrpCopriEndpt.SimPower(mu11=0.2,mu12=0.25, mu21=0.005, mu22=0.015, rho=0.25,
+ tau=0.5, alpha1=0.0025, alpha2=0.024, alternative = "two.sided",Nmax=584, B=10000)
[1] 1e-04
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.312 0.073 8.508 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
