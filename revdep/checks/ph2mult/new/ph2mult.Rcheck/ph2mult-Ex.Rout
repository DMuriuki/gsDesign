
R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ph2mult"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ph2mult')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("IUT.design")
> ### * IUT.design
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IUT.design
> ### Title: The design function for multinomial designs under
> ###   intersection-union test (IUT)
> ### Aliases: IUT.design
> 
> ### ** Examples
> 
> p01=0.1; p02=0.9
> ## Calculate type I error for single-stage design
> IUT.design(method="s1",s1.rej=18, t1.rej = 12, n1=80,
+ s1.rej.delta = 1, t1.rej.delta = 1, n1.delta=1,
+ p0.s = 0.15, p0.t = 0.25, p1.s = 0.3, p1.t= 0.1, output = "minimax")
  p0.s p0.t p1.s p1.t s.rej t.rej  N      Error     Power
2 0.15 0.25  0.3  0.1    18    11 79 0.04298467 0.8569868
3 0.15 0.25  0.3  0.1    19    11 79 0.02284793 0.8248897
5 0.15 0.25  0.3  0.1    18    12 79 0.04298467 0.8964517
6 0.15 0.25  0.3  0.1    19    12 79 0.02535467 0.8618516
8 0.15 0.25  0.3  0.1    18    13 79 0.04767737 0.9186661
9 0.15 0.25  0.3  0.1    19    13 79 0.04767737 0.8824937
> 
> ## Designs for two-stage design, output PET and EN under null hypothesis
> IUT.design(method="s2",s1.rej = 11, t1.rej = 4, s1.acc=8, t1.acc = 5, n1=40,
+ s2.rej=18, t2.rej = 11, n2=40, p0.s = 0.15, p0.t = 0.25, p1.s = 0.3, p1.t= 0.1, output = "minimax")
    p0.s p0.t p1.s p1.t s1.rej t1.rej s1.acc t1.acc s2.rej t2.rej N1 N2
PET 0.15 0.25  0.3  0.1     11      4      8      5     18     11 40 40
         Error     Power       PET       EN
PET 0.04825632 0.8635933 0.9866185 40.53526
> IUT.design(method="s2",s1.rej = 11, t1.rej = 4, s1.acc=8, t1.acc = 5, n1=40,
+ s2.rej=18, t2.rej = 11, n2=40, p0.s = 0.15, p0.t = 0.25, p1.s = 0.3, p1.t= 0.1, output = "optimal")
    p0.s p0.t p1.s p1.t s1.rej t1.rej s1.acc t1.acc s2.rej t2.rej N1 N2
PET 0.15 0.25  0.3  0.1     11      4      8      5     18     11 40 40
         Error     Power       PET       EN
PET 0.04825632 0.8635933 0.9866185 40.53526
> 
> 
> 
> 
> cleanEx()
> nameEx("IUT.power")
> ### * IUT.power
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IUT.power
> ### Title: The power function for multinomial designs under
> ###   intersection-union test (IUT)
> ### Aliases: IUT.power
> 
> ### ** Examples
> 
> p01=0.1; p02=0.9
> ## Calculate type I error for single-stage design
> max(IUT.power(method="s1", s1.rej=6, t1.rej=19, n1=25, p.s=p01, p.t=0),
+ IUT.power(method="s1", s1.rej=6, t1.rej=19, n1=25, p.s=1-p02, p.t=p02))
[1] 0.03339994
> ## Calculate power for single-stage design
> IUT.power(method="s1", s1.rej=6, t1.rej=19, n1=25, p.s=p01+0.2, p.t=p02-0.2)
[1] 0.8065116
> 
> ## Calculate type I error for two-stage design
> max(IUT.power(method="s2", s1.rej=4, t1.rej=9, s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=p01, p.t=0),
+ IUT.power(method="s2", s1.rej=4, t1.rej=9, s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=1-p02, p.t=p02))
[1] 0.04863885
> ## Output PET and EN under null hypothesis
> IUT.power(method="s2", s1.rej=4, t1.rej=9, s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=p01, p.t=p02, output.all=TRUE)[-1]
       PET         EN 
 0.2883473 20.8281797 
> ## Calculate power for two-stage design
> IUT.power(method="s2", s1.rej=4, t1.rej=9, s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=p01+0.2, p.t=p02-0.2)
[1] 0.8004053
> 
> ## Calculate type I error for two-stage design stopping for futility only,
> ## output PET and EN under null hypothesis
> max(IUT.power(method="s2.f", s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=p01, p.t=0),
+ IUT.power(method="s2.f", s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=1-p02, p.t=p02))
[1] 0.02758312
> ## Output PET and EN under null hypothesis
> IUT.power(method="s2.f", s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=p01, p.t=p02, output.all=TRUE)[-1]
       PET         EN 
 0.2541866 21.2039476 
> ## Calculate power for two-stage design
> IUT.power(method="s2.f", s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=p01+0.2, p.t=p02-0.2)
[1] 0.7704337
> 
> 
> 
> cleanEx()
> nameEx("UIT.design")
> ### * UIT.design
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: UIT.design
> ### Title: The design function for multinomial designs under
> ###   union-intersection test (UIT)
> ### Aliases: UIT.design
> 
> ### ** Examples
> 
> 
> ## Calculate type I error for single-stage design
> UIT.design(method="s1",s1.rej=18, t1.rej = 12, n1=80,
+ p0.s = 0.15, p0.t = 0.25, p1.s = 0.3, p1.t= 0.1)
  p0.s p0.t p1.s p1.t s.rej t.rej  N  Error Power
1 0.15 0.25  0.3  0.1    18    12 80 0.0462  0.99
   user  system elapsed 
  0.032   0.000   0.033 
> 
> ## Designs for two-stage design, output PET and EN under null hypothesis
> UIT.design(method="s2",s1.rej = 11, t1.rej = 4, s1.acc=8, t1.acc = 5, n1=40,
+ s2.rej=18, t2.rej = 11, n2=40, p0.s = 0.15, p0.t = 0.25, p1.s = 0.3, p1.t= 0.1, output.all=TRUE)
  p0.s p0.t p1.s p1.t s1.rej t1.rej s1.acc t1.acc s2.rej t2.rej N1 N2  Error
1 0.15 0.25  0.3  0.1     11      4      8      5     18     11 40 40 0.0419
  Power
1 0.944
   user  system elapsed 
  0.607   0.001   0.612 
> 
> 
> 
> 
> cleanEx()
> nameEx("UIT.power")
> ### * UIT.power
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: UIT.power
> ### Title: The power function for multinomial designs under
> ###   union-intersection test (UIT)
> ### Aliases: UIT.power
> 
> ### ** Examples
> 
> p01=0.1; p02=0.9
> ## Calculate type I error for single-stage design
> UIT.power(method="s1", s1.rej=6, t1.rej=19, n1=25, p.s=p01, p.t=p02)
[1] 0.03339994
> ## Calculate power for single-stage design
> UIT.power(method="s1", s1.rej=6, t1.rej=19, n1=25, p.s=p01+0.2, p.t=p02-0.2)
[1] 0.8065116
> 
> ## Calculate type I error for two-stage design, output PET and EN under null hypothesis
> UIT.power(method="s2", s1.rej=4, t1.rej=9, s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=p01, p.t=p02, output.all=TRUE)
    Pow.fun         PET          EN 
 0.04863885  0.28834730 20.82817966 
> ## Calculate power for two-stage design
> UIT.power(method="s2", s1.rej=4, t1.rej=9, s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=p01+0.2, p.t=p02-0.2)
[1] 0.8004053
> 
> ## Calculate type I error for two-stage design stopping for futility only,
> ## output PET and EN under null hypothesis
> UIT.power(method="s2.f", s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=p01, p.t=p02, output.all=TRUE)
   Pow.fun        PET         EN 
 0.0272944  1.0000000 13.0000000 
> ## Calculate power for two-stage design
> UIT.power(method="s2.f", s1.acc=0, t1.acc=13, n1=13,
+ s2.rej=6, t2.rej=18, n2=11, p.s=p01+0.2, p.t=p02-0.2)
[1] 0.7704337
> 
> 
> 
> cleanEx()
> nameEx("binom.design")
> ### * binom.design
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binom.design
> ### Title: The design function for Simon (admissible) two-stage design
> ### Aliases: binom.design
> 
> ### ** Examples
> 
> binom.design(type = "admissible", p0 = 0.15, p1 = 0.3, signif.level = 0.05, power.level = 0.9,
+ plot.out = TRUE)
             r1 n1  r  n   EN.p0.   PET.p0.      error     power
Optimal       5 30 17 82 45.05006 0.7105757 0.04609244 0.9007424
Admissible    5 31 16 76 45.28032 0.6826597 0.04694758 0.9037415
Admissible.1  6 36 15 70 45.86191 0.7099439 0.04654875 0.9000510
Minimax       6 42 14 64 51.80052 0.5545216 0.04845876 0.9002785
> 
> 
> 
> cleanEx()
> nameEx("binom.power")
> ### * binom.power
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binom.power
> ### Title: The power function for Simon (admissible) two-stage design
> ### Aliases: binom.power
> 
> ### ** Examples
> 
> ## Calculate type I error
> binom.power(5, 31, 16, 76, 0.15)
[1] 0.04694758
> binom.power(5, 31, 16, 76, 0.3)
[1] 0.9037415
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.701 0.023 3.844 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
